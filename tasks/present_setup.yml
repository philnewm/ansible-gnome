---

- name: Install Gnome packages
  when: item not in ansible_facts.packages
  loop: "{{ (gnome_packages[ansible_os_family] + gedit_plugins[ansible_os_family]) | flatten(1) }}"
  become: true
  ansible.builtin.package:
    name: "{{ item }}"
    state: present

- name: Install system-wide flatpaks
  become: true
  loop: "{{ flatpaks }}"
  community.general.flatpak:
    name: "{{ item }}"
    state: present

- name: Remove obsolete Gnome packages
  become: true
  loop: "{{ obsolete_packages[ansible_os_family] | flatten(1) }}"
  ansible.builtin.package:
    name: "{{ item }}"
    state: absent

# TODO compatible for other oses
- name: Check if /dev/mapper/almalinux-home exists
  ansible.builtin.stat:
    path: /dev/mapper/almalinux-home
  register: home_mapper

- name: Get filesystem type of /home
  when: home_mapper.stat.exists
  ansible.builtin.command: "findmnt -n -o FSTYPE /home"
  register: home_fs_type
  changed_when: false

- name: Modify /etc/fstab dynamically
  become: true
  when: home_mapper.stat.exists
  ansible.builtin.lineinfile:
    path: /etc/fstab
    regexp: '^/dev/mapper/almalinux-home'
    line: "/dev/mapper/almalinux-home /home {{ home_fs_type.stdout }} defaults,x-gvfs-show,x-gvfs-name=Home 0 0"
    state: present

- name: Create system default resolution path
  become: true
  ansible.builtin.file:
    path: "{{ gdm_monitor_config_sys_path[ansible_os_family] }}"
    state: directory
    mode: "0700"
    owner: "{{ gdm_user_name[ansible_distribution] }}"
    group: "{{ gdm_user_name[ansible_distribution] }}"

- name: Set system default resolution
  become: true
  ansible.builtin.template:
    src: monitors.xml.j2
    dest: "{{ gdm_monitor_config_sys_path[ansible_os_family] }}/monitors.xml"
    mode: "0644"
    owner: "{{ gdm_user_name[ansible_distribution] }}"
    group: "{{ gdm_user_name[ansible_distribution] }}"

...

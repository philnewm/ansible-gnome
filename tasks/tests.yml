---

- name: Gather package facts
  ansible.builtin.package_facts:

- name: Get repos on rhel based systems
  when: ansible_os_family == "RedHat"
  block:
    - name: Get enabled repos
      ansible.builtin.shell:
        cmd: |
          set -o pipefail
          dnf repolist --enabled | awk '{print $1}'
      args:
        executable: /bin/bash
      register: enabled_repos
      changed_when: false

    - name: Test enabled repos
      ansible.builtin.assert:
        that:
          - item in enabled_repos.stdout_lines
        fail_msg: "Repo '{{ item }}' is missing."
        quiet: true
      loop:
        - crb
        - epel
        - rpmfusion-free-updates
        - rpmfusion-nonfree-updates

- name: Test installed requirements
  loop: "{{ dependencies[ansible_os_family] }}"
  ansible.builtin.assert:
    that:
      - item in ansible_facts.packages
    fail_msg: "Required package '{{ item }}' is missing."
    quiet: true

- name: Test installed gnome packages
  loop: "{{ gnome_packages[ansible_os_family] | flatten(1) }}"
  ansible.builtin.assert:
    that:
      - item in ansible_facts.packages
    fail_msg: "Gnome package '{{ item }}' is missing."
    quiet: true

- name: Test removed gnome packages
  loop: "{{ obsolete_packages[ansible_os_family] | flatten(1) }}"
  ansible.builtin.assert:
    that:
      - item not in ansible_facts.packages
    fail_msg: "Obsolete Gnome package {{ item }} is still rpesent"
    quiet: true

- name: Get installed apps
  ansible.builtin.find:
    paths:
      - "/opt"
      - "/usr"
    file_type: directory
    depth: 1
  register: app_dirs

- name: Set apps list
  ansible.builtin.set_fact:
    present_apps: "{{ app_dirs.files | map(attribute='path') | map('basename') | list }}"

- name: Test custom apps
  loop: "{{ custom_apps }}"
  loop_control:
    label: "{{ item.name }}"
  ansible.builtin.assert:
    that: item.name | lower in present_apps
    fail_msg: "Failed to find {{ item.name }} at '/opt' or '/usr'"
    quiet: true

- name: Check if /dev/mapper/almalinux-home exists
  ansible.builtin.stat:
    path: /dev/mapper/almalinux-home
  register: home_mapper

- name: Verify that the /home entry contains the required options
  when: home_mapper.stat.exists
  ansible.builtin.command: "grep -E '^/dev/mapper/almalinux-home' /etc/fstab"
  register: fstab_check
  failed_when: "'x-gvfs-show' not in fstab_check.stdout or 'x-gvfs-name=Home' not in fstab_check.stdout"
  changed_when: false

- name: Get current target
  ansible.builtin.stat:
    path: /etc/systemd/system/default.target
  register: default_target

- name: Test graphical target
  ansible.builtin.assert:
    that:
      - default_target.stat.islnk == true
      - default_target.stat.lnk_target == "/usr/lib/systemd/system/graphical.target"
    fail_msg: "Graphical target not set as default."
    quiet: true

- name: "Get gdm config"
  ansible.builtin.command:
    cmd: "cat {{ gdm_config_file[ansible_distribution] }}"
  register: gdm_config
  changed_when: false

- name: Assert X11 is set
  ansible.builtin.assert:
    that:
      - "'WaylandEnable=false' in gdm_config.stdout_lines"
      - "'DefaultSession=gnome-xorg.desktop' in gdm_config.stdout_lines"
    fail_msg: "One or both of the expected lines are not present in {{ gdm_config_file[ansible_distribution] }}"
    quiet: true

- name: Get installed GNOME extensions
  ansible.builtin.command:
    cmd: "ls {{ extension_path_system }}"
  register: extensions_list_result
  changed_when: false

- name: Set extensions list
  ansible.builtin.set_fact:
    present_extensions: "{{ extensions_list_result.stdout_lines }}"

- name: Test installed extensions
  loop: "{{ gnome_extensions }}"
  loop_control:
    label: "{{ extension.name }}"
    loop_var: extension
  ansible.builtin.assert:
    that:
      extension.address in present_extensions
    fail_msg: "Failed to find '{{ extension.address }}' in installed extensions."
    quiet: true

- name: Get enabled extensions
  community.general.dconf:
    key: "/org/gnome/shell/enabled-extensions"
    state: read
  register: enabled_extensions_list

- name: Test enabled extensions
  loop: "{{ gnome_extensions }}"
  loop_control:
    label: "{{ extension.name }}"
    loop_var: extension
  ansible.builtin.assert:
    that:
      extension.address in enabled_extensions_list.value
    fail_msg: "'{{ extension.address }}' did not get enabled."
    quiet: true

- name: Get disabled extensions
  community.general.dconf:
    key: "/org/gnome/shell/disabled-extensions"
    state: read
  register: disabled_extensions_list

- name: Test disabled extensions
  ansible.builtin.assert:
    # INFO none is default - changes to '@as []' as soon as an extension was diabled ones
    that:
      - disabled_extensions_list.value in [none, '@as []']
    fail_msg: "Found disabled extension '{{ disabled_extensions_list.value }}' expected one of [none, '@as []']."
    quiet: true

- name: Collect gnome extensions dconf config
  loop: "{{ gnome_extensions }}"
  loop_control:
    loop_var: ext
    label: "{{ ext.name }}"
  when: ext.dconf_settings is defined
  ansible.builtin.set_fact:
    ext_dconf: "{{ ext_dconf | default({}) | combine(ext.dconf_settings) }}"

- name: Get installed GNOME themes
  ansible.builtin.find:
    paths: "{{ theme_paths }}"
    file_type: directory
    depth: 1
  register: theme_dirs

- name: Set themes list
  ansible.builtin.set_fact:
    present_themes: "{{ theme_dirs.files | map(attribute='path') | map('basename') | list }}"

- name: Test installed gnome themes
  loop: "{{ gnome_themes }}"
  loop_control:
    loop_var: theme
    label: "{{ theme.name }}"
  ansible.builtin.assert:
    that:
      theme.name in present_themes
    fail_msg: "Theme {{ theme.name }} not found."
    quiet: true

- name: Read display server resolution_x
  become: true
  community.general.xml:
    path: "{{ gdm_monitor_config_sys_path[ansible_os_family] }}/monitors.xml"
    xpath: '/monitors/configuration/logicalmonitor/monitor/mode/width'
    content: text
  register: width_value

- name: Read display server resolution_y
  become: true
  community.general.xml:
    path: "{{ gdm_monitor_config_sys_path[ansible_os_family] }}/monitors.xml"
    xpath: '/monitors/configuration/logicalmonitor/monitor/mode/height'
    content: text
  register: height_value

- name: Verify expected display server resolution
  ansible.builtin.assert:
    that:
      - width_value.matches[0].width | int == gdm_default_resolution_x
      - height_value.matches[0].height | int == gdm_default_resolution_y
    fail_msg: >
      "A display server resolution of {{ gdm_default_resolution_x }}
      x{{ gdm_default_resolution_y }} was expected, got
        {{ width_value.matches[0].width }}x{{ height_value.matches[0].height }}
        instead"
    quiet: true

...
